// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  posts         Post[]
  savedPosts    PostSave[]
  likedPosts    PostLike[]
  dislikedPosts PostDislike[]
  auth          Auth?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Auth {
  id             String @id @default(cuid())
  hashedPassword String
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
}

model Post {
  id        String        @id @default(cuid())
  title     String
  slug      String        @unique()
  tags      String[]
  content   String?       @db.Text
  published Boolean       @default(false)
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     PostLike[]
  dislikes  PostDislike[]
  saves     PostSave[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([authorId])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostDislike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostSave {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}
